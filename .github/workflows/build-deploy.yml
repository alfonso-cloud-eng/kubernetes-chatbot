permissions:
  issues: write
  contents: read
  
name: Build and Deploy to GKE Autopilot

on:
  push:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      #################################################
      # 1) Build & Push the Docker Image to Docker Hub
      #################################################
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kubernetes-chatbot:${{ github.sha }}


      - name: Cleanup old Docker Hub images
        run: |
            current_tag="${{ github.sha }}"
            echo "Current tag is: $current_tag"
            tags=$(curl -s -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" \
              "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/kubernetes-chatbot/tags?page_size=100" \
              | jq -r '.results[].name')
            echo "Found tags: $tags"
            for tag in $tags; do
              if [ "$tag" != "$current_tag" ] && [ "$tag" != "latest" ]; then
                echo "Attempting to delete tag: $tag"
                response=$(curl -X DELETE -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/kubernetes-chatbot/tags/$tag/")
                echo "Response for deleting tag $tag: $response"
              fi
            done        

      #################################################
      # 2) Provision / Update GKE Autopilot with Terraform
      #################################################
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
            credentials_json: ${{ secrets.GCP_CREDENTIALS }}
  
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
            project_id: ${{ secrets.GCP_PROJECT_ID }}
  
      - name: Verify authentication
        run: gcloud auth list
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Check Terraform version
        run: terraform version

      # First initialize Terraform
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      # Import the existing cluster if it exists
      - name: Check if GKE Cluster Exists
        working-directory: terraform
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          TF_VAR_deployer_service_account_email: ${{ secrets.DEPLOYER_SERVICE_ACCOUNT_EMAIL }}
          TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_cluster_name: ${{ secrets.CLUSTER_NAME }}
        run: |
          if gcloud container clusters describe "${CLUSTER_NAME}" --region "${GCP_REGION}" --project "${GCP_PROJECT_ID}" >/dev/null 2>&1; then
            echo "Cluster exists, importing into Terraform state..."
            terraform import google_container_cluster.chatbot_cluster projects/${GCP_PROJECT_ID}/locations/${GCP_REGION}/clusters/${CLUSTER_NAME} || echo "Import failed (maybe already imported)"
          else
            echo "Cluster does not exist; Terraform will create it."
          fi

      # Now run apply to create/update the cluster
      - name: Create/Update GKE Cluster
        working-directory: terraform
        env:
          TF_VAR_deployer_service_account_email: ${{ secrets.DEPLOYER_SERVICE_ACCOUNT_EMAIL }}
          TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_cluster_name: ${{ secrets.CLUSTER_NAME }}
        run: terraform apply -auto-approve

      #################################################
      # 3) Deploy the New Image to GKE
      #################################################
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Create/Update Kubernetes Secret for OpenAI API Key
        run: |
            kubectl delete secret openai-api-key || true
            kubectl create secret generic openai-api-key \
              --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

      - name: Deploy Kubernetes Manifests
        run: |
          export IMAGE_TAG=${{ github.sha }}
          envsubst < k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml

      - name: Restart Deployment to make updates
        run: kubectl rollout restart deployment/chatbot-deployment

      #################################################
      # 4) Notify Deployment Status
      #################################################

      - name: Wait for Service External IP
        id: get-ip
        run: |
          echo "Waiting for external IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc chatbot-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -n "$IP" ]; then
              echo "External IP found: $IP"
              echo "ip=$IP" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 10
          done
          echo "External IP not found after waiting"
          exit 1

      - name: Create or get Deployment Status Issue
        id: deployment_issue
        uses: actions/github-script@v6
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const issueTitle = "Deployment Status";
              // Try to find an open issue with the title "Deployment Status"
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open"
              });
              let deploymentIssue = issues.find(issue => issue.title === issueTitle);
              if (!deploymentIssue) {
                // If not found, create a new issue
                const { data: newIssue } = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: "This issue is used to track deployment status updates.",
                  labels: ["deployment"]
                });
                deploymentIssue = newIssue;
              }
              // Explicitly return a JSON string:
              return JSON.stringify({ issue_number: deploymentIssue.number });
            result-encoding: string
        
  
      - name: Post Deployment Update Comment
        uses: actions/github-script@v6
        with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const ip = process.env.SERVICE_IP;
                if (!ip) {
                  core.setFailed("Service IP not found");
                }
                const url = `http://${ip}`;
                const comment = `:tada: Deployment update: The chatbot service is now available at [${url}](${url}).`;
                const issueInfo = JSON.parse(process.env.ISSUE_INFO);
                const issueNumber = issueInfo.issue_number;
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: comment
                });
        env:
              SERVICE_IP: ${{ steps.get-ip.outputs.ip }}
              ISSUE_INFO: ${{ steps.deployment_issue.outputs.result }}
          
  


