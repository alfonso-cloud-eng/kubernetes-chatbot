name: Build and Deploy to GKE Autopilot

on:
  push:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      #################################################
      # 1) Build & Push the Docker Image to Docker Hub
      #################################################
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

   #   - name: Build and push Docker image
   #     uses: docker/build-push-action@v3
   #     with:
   #       context: .
   #       push: true
   #       tags: ${{ secrets.DOCKERHUB_USERNAME }}/kubernetes-chatbot:latest

      #################################################
      # 2) Provision / Update GKE Autopilot with Terraform
      #################################################
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
            credentials_json: ${{ secrets.GCP_CREDENTIALS }}
  
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
            project_id: ${{ secrets.GCP_PROJECT_ID }}
  
      - name: Verify authentication
        run: gcloud auth list
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Check Terraform version
        run: terraform version

      # First initialize Terraform
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      # Import the existing cluster if it exists
      - name: Import cluster if exists
        working-directory: terraform
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
          TF_VAR_deployer_service_account_email: ${{ secrets.DEPLOYER_SERVICE_ACCOUNT_EMAIL }}
          TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_cluster_name: ${{ secrets.CLUSTER_NAME }}
        run: |
          if gcloud container clusters describe "${CLUSTER_NAME}" --region "${GCP_REGION}" --project "${GCP_PROJECT_ID}" >/dev/null 2>&1; then
            echo "Cluster exists, importing into Terraform state..."
            terraform import google_container_cluster.chatbot_cluster projects/${GCP_PROJECT_ID}/locations/${GCP_REGION}/clusters/${CLUSTER_NAME} || echo "Import failed (maybe already imported)"
          else
            echo "Cluster does not exist; Terraform will create it."
          fi

      # Now run apply to create/update the cluster
      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_deployer_service_account_email: ${{ secrets.DEPLOYER_SERVICE_ACCOUNT_EMAIL }}
          TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_cluster_name: ${{ secrets.CLUSTER_NAME }}
        run: terraform apply -auto-approve

      #################################################
      # 3) Deploy the New Image to GKE
      #################################################
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} \
            --region ${{ secrets.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create Kubernetes Secret for OpenAI API Key
        run: |
          kubectl create secret generic openai-api-key \
            --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
