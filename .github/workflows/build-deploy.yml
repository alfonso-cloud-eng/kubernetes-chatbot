permissions:
  issues: write
  contents: read
  
name: Build and Deploy to GKE Autopilot

on:
  push:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      #################################################
      # 1) (Optional) Build & Push the Docker Image to Docker Hub
      #################################################
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set Docker Hub credentials in env
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKERHUB_ACCESS_TOKEN=${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" >> $GITHUB_ENV   

      - name: Log in to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_ACCESS_TOKEN != '' }}
        uses: docker/login-action@v2
        with:
            username: ${{ env.DOCKERHUB_USERNAME }}
            password: ${{ env.DOCKERHUB_ACCESS_TOKEN }}
        

      - name: Conditional Docker Hub Build/Push
        id: buildpush
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_ACCESS_TOKEN != '' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/kubernetes-chatbot:${{ github.sha }}

      #################################################
      # 2) Set Docker Image Variable
      #################################################
      - name: Set Docker Image Variable
        id: set-image
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" ]; then
            echo "No Docker Hub credentials provided, using default image."
            echo "docker_image=alfonsomonserrat/kubernetes-chatbot:51186eb1590bf44f7257e1d0838d278635524ac8" >> $GITHUB_OUTPUT
          else
            echo "Using user provided Docker Hub credentials."
            echo "docker_image=${{ secrets.DOCKERHUB_USERNAME }}/kubernetes-chatbot:${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      #################################################
      # 3) Provision / Update GKE Autopilot with Terraform
      #################################################
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
  
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
  
      - name: Verify authentication
        run: gcloud auth list

      - name: Enable Required Google APIs
        run: |
          gcloud services enable container.googleapis.com cloudresourcemanager.googleapis.com compute.googleapis.com iam.googleapis.com --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Check if GKE Cluster Exists
        working-directory: terraform
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          CLUSTER_NAME: chatbot-autopilot-cluster
          TF_VAR_deployer_service_account_email: ${{ secrets.DEPLOYER_SERVICE_ACCOUNT_EMAIL }}
          TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_cluster_name: chatbot-autopilot-cluster
        run: |
          if gcloud container clusters describe chatbot-autopilot-cluster --region "${GCP_REGION}" --project "${GCP_PROJECT_ID}" >/dev/null 2>&1; then
            echo "Cluster exists, importing into Terraform state..."
            terraform import google_container_cluster.chatbot_cluster projects/${GCP_PROJECT_ID}/locations/${GCP_REGION}/clusters/chatbot-autopilot-cluster || echo "Import failed (maybe already imported)"
          else
            echo "Cluster does not exist; Terraform will create it."
          fi

      - name: Create/Update GKE Cluster
        working-directory: terraform
        env:
          TF_VAR_deployer_service_account_email: ${{ secrets.DEPLOYER_SERVICE_ACCOUNT_EMAIL }}
          TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_cluster_name: chatbot-autopilot-cluster
        run: terraform apply -auto-approve

      #################################################
      # 4) Deploy the New Image to GKE
      #################################################
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials chatbot-autopilot-cluster \
            --region ${{ secrets.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Create/Update Kubernetes Secret for OpenAI API Key
        run: |
            kubectl delete secret openai-api-key || true
            kubectl create secret generic openai-api-key \
              --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

      - name: Deploy Kubernetes Manifests
        run: |
          export DOCKER_IMAGE=${{ steps.set-image.outputs.docker_image }}
          envsubst < k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml

      - name: Restart Deployment to make updates
        run: kubectl rollout restart deployment/chatbot-deployment

      #################################################
      # 5) Notify Deployment Status
      #################################################
      - name: Wait for Service External IP
        id: get-ip
        run: |
          echo "Waiting for external IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc chatbot-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -n "$IP" ]; then
              echo "External IP found: $IP"
              echo "ip=$IP" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 10
          done
          echo "External IP not found after waiting"
          exit 1

      - name: Show External IP
        if: always()
        run: |
            echo "************************************************************"
            echo "CONGRATULATIONS! Your Chatbot is now available at:"
            echo "  http://${{ steps.get-ip.outputs.ip }}"
            echo "************************************************************"
